<?php
// $Id$

/**
 * @file
 * Allows users with valid permissions to tag profile fields created
 * from the profile module as required fields for a
 * users profile to be considered complete.
 */

/**
 * Implements hook_init().
 */
function pcp_init() {
  // needed to execute pcp_form_user_admin_settings_alter()
  include_once('pcp.admin.inc');
}

/**
 * Implements hook_theme().
 */
function pcp_theme($existing, $type, $theme, $path) {
  return array(
    'pcp_profile_percent_complete' => array(
      'template' => 'pcp-block',
      'variables' => array('complete_data' => NULL),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function pcp_permission() {
  return array(
    'administer pcp' => array(
      'title' => t('Administer Profile Complete Percentages'),
      'description' => t('Allows a user to configure which fields to be considered complete.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pcp_menu() {
  $items['admin/config/people/pcp'] = array(
    'title' => 'Profile Complete Percentages',
    'description' => 'Tag profile fields as required for percent complete handling.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pcp_admin_settings'),
    'access arguments' => array('administer pcp'),
    'file' => 'pcp.admin.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function pcp_block_info() {
  $blocks['pcp_profile_percent_complete'] = array(
    'info' => t('Profile Complete Percentage'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pcp_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'pcp_profile_percent_complete':
      global $user;

      $out = pcp_get_complete_percentage_data($user);
      $hide = variable_get('pcp_hide_block_on_complete', 0);

      if (($hide && empty($out)) || empty($out)) {
        $subject = '';
        $content = '';
      }
      else {
        $subject = t('Profile Complete');
        $content = theme('pcp_profile_percent_complete', $out);
      }

      $block['subject'] = $subject;
      $block['content'] = $content;
      break;
  }
  return $block;
}

/**
 * Get the profile complete percentage data for a given user.
 *
 * @param $user
 *   User object
 *
 * @return
 *   PCP data array.
 */
function pcp_get_complete_percentage_data($user) {
  $entity_fields = field_info_instances('user', 'user');

  $profile_fields = pcp_get_tagged_profile_fields();
  $additional_fields = pcp_get_additional_tagged_fields();
  $fields = $profile_fields + $additional_fields;

  $user_profile_values = pcp_get_user_profile_values($user->uid);
  $user_additional_values = pcp_get_user_additional_values($user->uid);
  $user_values = $user_profile_values + $user_additional_values;

  $data = array();

  // Enumerate empty fields
  $empty_fields = array();
  foreach ($fields as $key => $field) {
    if (empty($user_values[$key])) {
      $empty_fields[$key] = $field;
    }
  }

  // If there is one empty field or more
  if ($empty_fields) {
    $data['uid'] = $user->uid;

    // Pick up a random field, we won't use suffle because it reindex the array
    // keys
    $fid = array_rand($empty_fields);

    if (is_numeric($fid)) {
      $field_title = $entity_fields[$fields[$fid]]['label'];
      $field_name = $fields[$fid];
    }
    elseif ($fid == 'user_picture') {
      $field_title = $fields[$fid]['title'];
      $field_name = $fields[$fid]['name'];
    }

    $data['nextfield_id'] = $fid;
    $data['nextfield_title'] = $field_title;
    $data['nextfield_name'] = $field_name;
  }

  $fields_count = count($fields);
  $empty_fields_count = count($empty_fields);

  $completed_fields = $fields_count - $empty_fields_count;
  $current_percent = number_format(($completed_fields / $fields_count), 2) * 100;
  $next_percent = number_format((($completed_fields + 1) / $fields_count), 2) * 100;

  $data['completed']  = $completed_fields;
  $data['incomplete'] = $empty_fields_count;
  $data['total'] = $fields_count;

  $data['current_percent'] = $current_percent;
  $data['next_percent'] = $next_percent;

  return $data;
}

/**
 * Get all the profile fields stored in the system, tagged or not tagged.
 */
function pcp_get_profile_fields($options = NULL) {
  $params = array('entity_type' => 'user');

  if ($options) {
    $params = array_merge($params, $options);
  }

  $instances = field_read_instances($params);
  $fields = array();
  foreach ($instances as $instance) {
    $fields[$instance['field_id']] = $instance['field_name'];
  }

  return $fields;
}

/**
 * Get all the profile fields that have been tagged.
 * If an $fid is passed in, only the data for that field will be returned.
 *
 * @param $fid
 *   The fid of the field data should be returned for. If null, all fields
 *   are returned.
 *
 * @return
 *   field(s) ID and name.
 */
function pcp_get_tagged_profile_fields($fid = null) {
  $query = db_select('field_config_instance', 'fci');
  $query->addField('fci', 'field_id', 'fid');
  $query->addField('fci', 'field_name', 'field_name');
  $query->join('profile_pcp', 'pcp', 'pcp.fid = fci.field_id');

  if (isset($fid)) {
    $query->condition('fid', $fid);
  }

  $result = $query->execute();

  $fields = array();
  foreach ($result as $row) {
    $fields[$row->fid] = $row->field_name;
  }

  return $fields;
}

/**
 * Get all other fields stored in the system that where not created by
 * the profile module. This allows additional PCP
 * support for other drupal features.
 */
function pcp_get_additional_fields() {
  $fields = array();

  // Enable user picture support.
  $fields['user_picture'] = array(
    'title' => 'User Picture',
    'name' => 'picture_upload',
  );

  return $fields;
}

/**
 * Get all additional tagged fields that where not created
 * using the profile module. This allows additional PCP
 * support for other drupal features.
 */
function pcp_get_additional_tagged_fields() {
  $fields = array();

  // Enable user picture support.
  if (variable_get('pcp_enable_user_picture', 0)) {
    $fields['user_picture'] = array(
      'fid' => 'user_picture',
      'title' => 'User Picture',
      'name' => 'picture_upload',
    );
  }

  return $fields;
}

/**
 * Return a users profile field values that have been saved
 * for a given user.
 *
 * @param int $uid - The uid of the user we are returning data for.
 *
 * @return assoc array of all profile fields for the user.
 */
function pcp_get_user_profile_values($uid) {
  $fields = field_info_instances('user', 'user');
  $user = user_load($uid);
  $user_fields = array();

  foreach ($fields as $field) {
    $fid = $field['field_id'];
    $user_fields[$fid] = $user->$field['field_name'];
  }

  return $user_fields;
}

/**
 * Return a users additional field values that have been saved
 * for a given user.
 *
 * @param int $uid - The uid of the user we are returning data for.
 *
 * @return assoc array of all profile fields for the user.
 */
function pcp_get_user_additional_values($uid) {
  $values = array();
  if ($uid) {
    $account = user_load($uid);
    $values['user_picture'] = $account->picture;
  }
  return $values;
}

/**
 * Process variables for pcp-block.tpl.php.
 *
 * @see pcp-block.tpl.php
 */
function template_preprocess_pcp_profile_percent_complete(&$variables) {
  if (isset($variables['nextfield_name'])) {
    $input_name = 'edit-' . str_replace('_', '-', $variables['nextfield_name']);
    $user_edit_path = 'user/'. $variables['uid'] .'/edit';

    $variables['next_path'] = url($user_edit_path, array('absolute' => TRUE, 'fragment' => $input_name));
  }
}
