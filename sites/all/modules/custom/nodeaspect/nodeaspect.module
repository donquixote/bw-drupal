<?php


/**
 * Implements hook_perm().
 */
function nodeaspect_perm() {
  return nodeaspect_info()->hook_perm();
}


/**
 * Implements hook_menu().
 */
function nodeaspect_menu() {
  $items = nodeaspect_info()->hook_menu();
  return $items;
}


/**
 * Implements hook_pagapi()
 */
function nodeaspect_pageapi($api) {
  nodeaspect_page_info_cache()->hook_pageapi($api);
}


/**
 * Implements hook_menu_alter()
 */
function nodeaspect_menu_alter(&$items) {
  nodeaspect_info()->hook_menu_alter($items);
}


/**
 * Implements hook_nodeaspect_page__(), for node/%.
 */
function nodeaspect_nodeaspect_page__($node, $api) {
  // This is the main node/% route, with emtpy suffix.
  $api->title($node->title);
  $api->pageTitle(check_plain($node->title));
  $api->buildmode('full');
  // We make this easy to override, by setting a low override weight.
  $api->override(-10);
}


/**
 * Implements hook_nodeaspect_page__view(), for node/%/view.
 */
function nodeaspect_nodeaspect_page__view($node, $api) {
  // This is the main node/% route, with emtpy suffix.
  $api->title(t('View'));
  // We make this easy to override, by setting a low override weight.
  $api->override(-10);
}


/**
 * Implements hook_entity_info_alter().
 */
function nodeaspect_entity_info_alter(&$entity_info) {
  nodeaspect_info()->hook_entity_info_alter($entity_info);
}


// Access, title and page callbacks
// -----------------------------------------------------------------------------


/**
 * Access callback for node/%/$suffix
 */
function nodeaspect_page_access($node, $suffix = '') {
  return nodeaspect_page_info($node, $suffix)->access();
}


/**
 * Title callback for node/%/$suffix
 */
function nodeaspect_page_title($node, $suffix = '') {
  return nodeaspect_page_info($node, $suffix)->title();
}


/**
 * Page callback for node/%/$suffix.
 */
function nodeaspect_page($node, $suffix = '') {
  return nodeaspect_page_info_cache()->page($node, $suffix);
}


// Static cache stuff
// -----------------------------------------------------------------------------


/**
 * Get information collected from hook_nodeaspect()
 *
 * @param $reset :boolean
 *   True for cache reset.
 *
 * @return :nodeaspect_InfoWrapper
 *   Object with information about menu entries, permissions and build modes.
 */
function nodeaspect_info($reset = FALSE) {
  static $_info;
  if ($reset) {
    $_info = NULL;
  }
  if (!isset($_info)) {
    module_load_include('info.inc', 'nodeaspect');
    $_info = _nodeaspect_info_build();
  }
  return $_info;
}


/**
 * Get information collected from hook_nodeaspect_page[__$suffix]()
 *
 * @param $node :stdClass
 *   The node object
 * @param $suffix :string
 *   The path suffix for node/%/$suffix.
 *
 * @return :nodeaspect_PageWrapper
 *   Object that implements access, title and page callback.
 */
function nodeaspect_page_info($node, $suffix) {
  return nodeaspect_page_info_cache()->pageInfo($node, $suffix);
}


function nodeaspect_page_info_cache() {
  static $_cache;
  if (!isset($_cache)) {
    $_cache = new nodeaspect_PageInfoCache();
  }
  return $_cache;
}


class nodeaspect_PageInfoCache {

  protected $_pages = array();
  protected $_active;

  function reset() {
    $this->_pages = array();
  }

  function pageInfo($node, $suffix) {
    if (!isset($this->_pages[$node->nid][$suffix])) {
      module_load_include('page.inc', 'nodeaspect');
      $this->_pages[$node->nid][$suffix] = _nodeaspect_page_info_build($node, $suffix);
    }
    return $this->_pages[$node->nid][$suffix];
  }

  function page($node, $suffix) {
    $page_info = $this->pageInfo($node, $suffix);
    $this->_active = array($page_info, $node, $suffix);
    return $page_info->page($node);
  }

  function hook_pageapi($api) {
    // This will trigger access callbacks.
    $api->initLocalTasks();
    foreach ($this->_pages as $nid => $pages) {
      foreach ($pages as $suffix => $info) {
        $weight = $info->localTaskWeight();
        if (isset($weight)) {
          $api->moveLocalTask('node/%/'. $suffix, $weight);
        }
      }
    }
    if (!empty($this->_active)) {
      list($page_info, $node, $suffix) = $this->_active;
      $page_info->hook_pageapi($api, $node, $suffix);
    }
  }
}






