<?php


/**
 * Implements hook_ds_fields_info()
 */
function views_content_ds_ds_fields_info($entity_type) {

  static $_fields;

  if (!isset($_fields)) {
    $_fields = _views_content_ds_collect_fields();
  }

  return $_fields;
}


function _views_content_ds_collect_fields() {

  $collector = new _views_content_ds_FieldCollector();

  $views = views_get_all_views();

  foreach ($views as $view_id => $view) {
    if (!empty($view->disabled)) {
      continue;
    }

    $view->init_display();
    foreach ($view->display as $display_id => $display) {
      if (empty($display->handler->panel_pane_display)) {
        continue;
      }
      if (empty($display->display_options['argument_input'])) {
        continue;
      }
      if (count($display->display_options['argument_input']) > 1) {
        continue;
      }

      // Pick the first and only argument.
      foreach ($display->display_options['argument_input'] as $arg_name => $arg_options) {}

      // Problem: What is the equivalent to "node.nid" for other entity types?
      if (!isset($arg_options['context'])) {
        continue;
      }

      $collector->viewsPane($arg_options, $display);
    }

    $view->destroy();
  }

  return $collector->fields();
}


class _views_content_ds_FieldCollector {

  protected $_fields = array();

  function fields() {
    return $this->_fields;
  }

  function viewsPane($arg_options, $display) {
    switch ($arg_options['context']) {
      case 'entity:node.tnid':
      case 'entity:node.nid':
      case 'entity:group.entity_id':
        $this->_viewsPane('node', $display);
        break;
      case 'entity:group.gid':
        break;
    }
  }

  protected function _viewsPane($entity_type, $display) {
    $fieldname = $this->_field($entity_type, $display->handler->view);
    $this->_formatter($entity_type, $fieldname, $display);
  }

  protected function _field($entity_type, $view) {
    $view_id = $view->name;
    $view_nicename = t($view->human_name);
    $fieldname = "views_content_ds__$view_id";
    $title = t('Views: !field_name', array('!field_name' => $view_nicename));
    if (!isset($this->_fields[$entity_type][$fieldname])) {
      $this->_fields[$entity_type][$fieldname] = array(
        'title' => $title,
        'field_type' => DS_FIELD_TYPE_FUNCTION,
        'function' => '_views_content_ds_field_print',
        // These two settings have no meaning for ds api,
        // we just need them in the callback.
        '_view_id' => $view_id,
        // We could restrict to specific bundles and view modes, if we wanted.
        'ui_limit' => array('*|*'),
      );
    }
    return $fieldname;
  }

  protected function _formatter($entity_type, $fieldname, $display) {
    $formatter_name = $display->id;
    $formatter_title = t($display->display_title);
    $this->_fields[$entity_type][$fieldname]['properties']['formatters'][$formatter_name] = $formatter_title;
  }
}


/**
 * Callback to render our ds field..
 */
function _views_content_ds_field_print($field) {
  // return __FUNCTION__;
  $entity = $node = $field['entity'];
  $entity_type = $field['entity_type'];
  $view_id = $field['_view_id'];
  $display_id = $field['formatter'];
  // TODO: Actually load the view, fill in the argument, render.
  // return __FUNCTION__;
  $conf = array(
    'context' => array('argument_entity_id:node_1'),
    'override_title' => 0,
    'override_title_text' => '',
  );
  $view = views_get_view($view_id);
  $view->set_display($display_id);
  $view->set_arguments(array($node->nid));
  $view->execute();
  $result = $view->render();
  return $result;
}






