<?php


/**
 * Implements hook_boot()
 */
function xautoload_boot() {
  // Nothing happens here. The function only exists so Drupal recognizes
  // xautoload as a boot-level module.
}


spl_autoload_register('_xautoload_autoload');


/**
 * Autoload callback for classes and interfaces, registered in hook_boot().
 */
function _xautoload_autoload($name) {
  $file = _xautoload_finder()->findFile($name);
  if ($file) {
    require_once $file;
  }
}


function _xautoload_finder() {
  static $_finder;
  if (!isset($_finder)) {
    $modules = module_list();
    foreach ($modules as $module => $m) {
      $path = drupal_get_path('module', $module) . '/lib/';
      if (is_dir($path)) {
        $modules[$module] = $path;
      }
    }
    $_finder = new xautoload_ClassFinder($modules);
  }
  return $_finder;
}


/**
 * We don't put this in the lib folder, obviously,
 * because it has to be available before xautoload is initialized.
 *
 * The thing is called ClassFinder, but it also works for interfaces.
 */
class xautoload_ClassFinder {

  protected $modules = array();

  function __construct($modules) {
    $this->modules = $modules;
  }

  function findFile($class) {
    if (preg_match('/^([a-z0-9_]+)_([A-Z].*)$/', $class, $m)) {
      list(,$module,$name) = $m;
      if (isset($this->modules[$module])) {
        $path = strtr($name, '_', '/');
        $path = $this->modules[$module] . $path . '.php';
        if (file_exists($path)) {
          return $path;
        }
      }
    }
  }
}

