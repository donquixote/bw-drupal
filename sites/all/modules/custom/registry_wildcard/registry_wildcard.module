<?php


function registry_wildcard_registry_files_alter(&$files, $modules) {

  $orig = $files;
  $rec_scan = new _registry_wildcard_RecursiveScan($files);

  foreach ($files as $path => $file) {
    $rec_scan->check($path, $file);
  }
}


class _registry_wildcard_RecursiveScan {

  protected $_array;
  protected $_value;
  protected $_plus = array();
  protected $_minus = array();

  function __construct(&$array) {
    $this->_array =& $array;
  }

  function dpm() {
    dpm($this->_minus);
    dpm($this->_plus);
  }

  function check($path, $value) {
    $this->_value = $value;
    if ($this->_check($path)) {
      unset($this->_array[$path]);
      $this->_minus[$path] = TRUE;
    }
  }

  protected function _abc($a, $b, $c = NULL) {
    if (is_dir($a)) {
      foreach (scandir($a) as $candidate) {
        if ($this->_validCand($candidate, $b)) {
          if (!isset($c)) {
            if ($b === '**') {
              $this->_abc("$a/$candidate", '**');
            }
            $this->_file("$a/$candidate");
          }
          else{
            if (!$this->_check("$a/$candidate/$c")) {
              $this->_file("$a/$candidate/$c");
            }
            if ($b === '**') {
              $this->_abc("$a/$candidate", '**', $c);
            }
          }
        }
      }
    }
  }

  protected function _validCand($candidate, $b) {

    if ($candidate == '.' || $candidate == '..') {
      return FALSE;
    }
    if (strpos($candidate, '*') !== FALSE) {
      return FALSE;
    }
    if ($b == '*' || $b == '**') {
      return TRUE;
    }

    // More complex wildcard string.
    $fragments = array();
    foreach (explode('*', $b) as $fragment) {
      $fragments[] = preg_quote($fragment);
    }
    $regex = implode('.*', $fragments);
    return preg_match("/^$regex$/", $candidate);
  }

  protected function _check($path) {
    if (preg_match('#^([^\*]*)/(.*\*.*)$#', $path, $m)) {
      list(, $a, $b) = $m;
      list($b, $c) = $result = explode('/', $b, 2) + array(NULL, NULL);
      if ($b === '**' && isset($c)) {
        $this->_check("$a/$c");
      }
      $this->_abc($a, $b, $c);
      return TRUE;
    }
    else {
      // Not a wildcard string
      return FALSE;
    }
  }

  protected function _file($path) {
    if (is_file($path)) {
      $this->_array[$path] = $this->_value;
      $this->_plus[$path] = TRUE;
    }
  }
}



